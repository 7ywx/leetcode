#
# @lc app=leetcode.cn id=134 lang=python3
#
# [134] 加油站
#
# https://leetcode.cn/problems/gas-station/description/
#
# algorithms
# Medium (47.82%)
# Likes:    1606
# Dislikes: 0
# Total Accepted:    362.1K
# Total Submissions: 758K
# Testcase Example:  '[1,2,3,4,5]\n[3,4,5,1,2]'
#
# 在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。
#
# 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。
#
# 给定两个整数数组 gas 和 cost ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一
# 的。
#
#
#
# 示例 1:
#
#
# 输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
# 输出: 3
# 解释:
# 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
# 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
# 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
# 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
# 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
# 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
# 因此，3 可为起始索引。
#
# 示例 2:
#
#
# 输入: gas = [2,3,4], cost = [3,4,3]
# 输出: -1
# 解释:
# 你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
# 我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
# 开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
# 开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
# 你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
# 因此，无论怎样，你都不可能绕环路行驶一周。
#
#
#
# 提示:
#
#
# gas.length == n
# cost.length == n
# 1 <= n <= 10^5
# 0 <= gas[i], cost[i] <= 10^4
#
#
#
from typing import List
# @lc code=start
class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        """
        寻找最小的开始位置，使得从该位置开始能够遍历整个gas列表而不需要额外的燃料。

        参数:
        gas -- 一个整数列表，表示每个加油站提供的燃料量。
        cost -- 一个整数列表，表示从一个加油站到下一个加油站所需的燃料成本。

        返回值:
        如果能找到一个位置，使得从该位置开始能够遍历整个gas列表，返回最小的开始位置索引；
        如果不能完成遍历，返回-1。
        """
        # 检查是否有足够的总汽油量完成一圈的旅行，如果没有，则返回-1
        if sum(gas) < sum(cost):
            return -1

        # 获取加油站的数量
        n = len(gas)
        # 初始化起始加油站的索引为-1，表示尚未找到合适的起始点
        start = -1
        # 初始化总的汽油量为0
        total_gas = 0

        # 遍历两倍的加油站数量，以确保可以尝试从每个加油站出发
        for i in range(2*n):
            # 使用模运算来循环遍历加油站
            i = i % n
            # 如果当前加油站的汽油量小于到达下一个加油站所需的成本
            if gas[i] < cost[i]:
                # 如果总的汽油量加上当前加油站的汽油仍然不足以到达下一个加油站
                if total_gas + gas[i] < cost[i]:
                    # 重置起始加油站索引为-1，表示从当前加油站出发不可行
                    start = -1
                    # 重置总的汽油量为0
                    total_gas = 0
                    # 继续下一次循环
                    continue
                else:
                    # 如果已经找到了一个潜在的起始加油站
                    if start == -1:
                        # 将当前加油站设置为潜在的起始点
                        start = i
                    # 更新总的汽油量
                    total_gas += gas[i] - cost[i]
            else:
                # 如果已经找到了一个潜在的起始加油站
                if start == -1:
                    # 将当前加油站设置为潜在的起始点
                    start = i
                # 更新总的汽油量
                total_gas += gas[i] - cost[i]

        # 返回起始加油站的索引，如果不存在，则为-1
        return start
# @lc code=end
s = Solution()
print(s.canCompleteCircuit([1,2,3,4,5], [3,4,5,1,2])) # 3
print(s.canCompleteCircuit([2,3,4], [3,4,3])) # -1
